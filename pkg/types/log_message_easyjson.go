// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC7e350d0DecodeGithubComDerElektrobesenSyslogStatPkgTypes(in *jlexer.Lexer, out *LogMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "RemoteHost":
			out.RemoteHost = string(in.String())
		case "Timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		case "remote_addr":
			out.RemoteAddr = string(in.String())
		case "request":
			out.Request = string(in.String())
		case "status":
			out.HTTPStatus = int(in.Int())
		case "http_referrer":
			out.HTTPReferer = string(in.String())
		case "http_user_agent":
			out.HTTPUserAgent = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7e350d0EncodeGithubComDerElektrobesenSyslogStatPkgTypes(out *jwriter.Writer, in LogMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"RemoteHost\":"
		out.RawString(prefix[1:])
		out.String(string(in.RemoteHost))
	}
	{
		const prefix string = ",\"Timestamp\":"
		out.RawString(prefix)
		out.Raw((in.Timestamp).MarshalJSON())
	}
	{
		const prefix string = ",\"remote_addr\":"
		out.RawString(prefix)
		out.String(string(in.RemoteAddr))
	}
	{
		const prefix string = ",\"request\":"
		out.RawString(prefix)
		out.String(string(in.Request))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.HTTPStatus))
	}
	{
		const prefix string = ",\"http_referrer\":"
		out.RawString(prefix)
		out.String(string(in.HTTPReferer))
	}
	{
		const prefix string = ",\"http_user_agent\":"
		out.RawString(prefix)
		out.String(string(in.HTTPUserAgent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7e350d0EncodeGithubComDerElektrobesenSyslogStatPkgTypes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7e350d0EncodeGithubComDerElektrobesenSyslogStatPkgTypes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7e350d0DecodeGithubComDerElektrobesenSyslogStatPkgTypes(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7e350d0DecodeGithubComDerElektrobesenSyslogStatPkgTypes(l, v)
}
func easyjsonC7e350d0DecodeGithubComDerElektrobesenSyslogStatPkgTypes1(in *jlexer.Lexer, out *LogContent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "remote_addr":
			out.RemoteAddr = string(in.String())
		case "request":
			out.Request = string(in.String())
		case "status":
			out.HTTPStatus = int(in.Int())
		case "http_referrer":
			out.HTTPReferer = string(in.String())
		case "http_user_agent":
			out.HTTPUserAgent = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7e350d0EncodeGithubComDerElektrobesenSyslogStatPkgTypes1(out *jwriter.Writer, in LogContent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"remote_addr\":"
		out.RawString(prefix[1:])
		out.String(string(in.RemoteAddr))
	}
	{
		const prefix string = ",\"request\":"
		out.RawString(prefix)
		out.String(string(in.Request))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.HTTPStatus))
	}
	{
		const prefix string = ",\"http_referrer\":"
		out.RawString(prefix)
		out.String(string(in.HTTPReferer))
	}
	{
		const prefix string = ",\"http_user_agent\":"
		out.RawString(prefix)
		out.String(string(in.HTTPUserAgent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogContent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7e350d0EncodeGithubComDerElektrobesenSyslogStatPkgTypes1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogContent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7e350d0EncodeGithubComDerElektrobesenSyslogStatPkgTypes1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogContent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7e350d0DecodeGithubComDerElektrobesenSyslogStatPkgTypes1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogContent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7e350d0DecodeGithubComDerElektrobesenSyslogStatPkgTypes1(l, v)
}
